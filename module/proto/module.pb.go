// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.23.3
// source: module.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type InitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AddServer  uint32 `protobuf:"varint,1,opt,name=add_server,json=addServer,proto3" json:"add_server,omitempty"`
	ModuleName string `protobuf:"bytes,2,opt,name=module_name,json=moduleName,proto3" json:"module_name,omitempty"`
}

func (x *InitRequest) Reset() {
	*x = InitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InitRequest) ProtoMessage() {}

func (x *InitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InitRequest.ProtoReflect.Descriptor instead.
func (*InitRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{0}
}

func (x *InitRequest) GetAddServer() uint32 {
	if x != nil {
		return x.AddServer
	}
	return 0
}

func (x *InitRequest) GetModuleName() string {
	if x != nil {
		return x.ModuleName
	}
	return ""
}

type Empty struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Empty) Reset() {
	*x = Empty{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Empty) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Empty) ProtoMessage() {}

func (x *Empty) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Empty.ProtoReflect.Descriptor instead.
func (*Empty) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{1}
}

type ConfigBody struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Config []byte `protobuf:"bytes,1,opt,name=config,proto3" json:"config,omitempty"`
}

func (x *ConfigBody) Reset() {
	*x = ConfigBody{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigBody) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigBody) ProtoMessage() {}

func (x *ConfigBody) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigBody.ProtoReflect.Descriptor instead.
func (*ConfigBody) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigBody) GetConfig() []byte {
	if x != nil {
		return x.Config
	}
	return nil
}

type GetWithoutParamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Args string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *GetWithoutParamRequest) Reset() {
	*x = GetWithoutParamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWithoutParamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWithoutParamRequest) ProtoMessage() {}

func (x *GetWithoutParamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWithoutParamRequest.ProtoReflect.Descriptor instead.
func (*GetWithoutParamRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{3}
}

func (x *GetWithoutParamRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetWithoutParamRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type GetRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Args string `protobuf:"bytes,3,opt,name=args,proto3" json:"args,omitempty"`
}

func (x *GetRequest) Reset() {
	*x = GetRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRequest) ProtoMessage() {}

func (x *GetRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRequest.ProtoReflect.Descriptor instead.
func (*GetRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{4}
}

func (x *GetRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *GetRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *GetRequest) GetArgs() string {
	if x != nil {
		return x.Args
	}
	return ""
}

type PostRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *PostRequest) Reset() {
	*x = PostRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PostRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PostRequest) ProtoMessage() {}

func (x *PostRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PostRequest.ProtoReflect.Descriptor instead.
func (*PostRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{5}
}

func (x *PostRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PostRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type PutRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *PutRequest) Reset() {
	*x = PutRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PutRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PutRequest) ProtoMessage() {}

func (x *PutRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PutRequest.ProtoReflect.Descriptor instead.
func (*PutRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{6}
}

func (x *PutRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PutRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PutRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type PatchRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Body []byte `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *PatchRequest) Reset() {
	*x = PatchRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatchRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatchRequest) ProtoMessage() {}

func (x *PatchRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatchRequest.ProtoReflect.Descriptor instead.
func (*PatchRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{7}
}

func (x *PatchRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *PatchRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *PatchRequest) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{8}
}

func (x *DeleteRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *DeleteRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

type SetErrorsForAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path         string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid         string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Message      string `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	MessageLevel string `protobuf:"bytes,4,opt,name=messageLevel,proto3" json:"messageLevel,omitempty"`
	MessageCode  string `protobuf:"bytes,5,opt,name=messageCode,proto3" json:"messageCode,omitempty"`
	DoPoints     bool   `protobuf:"varint,6,opt,name=doPoints,proto3" json:"doPoints,omitempty"`
}

func (x *SetErrorsForAllRequest) Reset() {
	*x = SetErrorsForAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetErrorsForAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetErrorsForAllRequest) ProtoMessage() {}

func (x *SetErrorsForAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetErrorsForAllRequest.ProtoReflect.Descriptor instead.
func (*SetErrorsForAllRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{9}
}

func (x *SetErrorsForAllRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *SetErrorsForAllRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *SetErrorsForAllRequest) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SetErrorsForAllRequest) GetMessageLevel() string {
	if x != nil {
		return x.MessageLevel
	}
	return ""
}

func (x *SetErrorsForAllRequest) GetMessageCode() string {
	if x != nil {
		return x.MessageCode
	}
	return ""
}

func (x *SetErrorsForAllRequest) GetDoPoints() bool {
	if x != nil {
		return x.DoPoints
	}
	return false
}

type ClearErrorsForAllRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Path     string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Uuid     string `protobuf:"bytes,2,opt,name=uuid,proto3" json:"uuid,omitempty"`
	DoPoints bool   `protobuf:"varint,3,opt,name=doPoints,proto3" json:"doPoints,omitempty"`
}

func (x *ClearErrorsForAllRequest) Reset() {
	*x = ClearErrorsForAllRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClearErrorsForAllRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClearErrorsForAllRequest) ProtoMessage() {}

func (x *ClearErrorsForAllRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClearErrorsForAllRequest.ProtoReflect.Descriptor instead.
func (*ClearErrorsForAllRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{10}
}

func (x *ClearErrorsForAllRequest) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ClearErrorsForAllRequest) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *ClearErrorsForAllRequest) GetDoPoints() bool {
	if x != nil {
		return x.DoPoints
	}
	return false
}

type CommonFault struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InFault      bool                   `protobuf:"varint,1,opt,name=InFault,proto3" json:"InFault,omitempty"`
	MessageLevel string                 `protobuf:"bytes,2,opt,name=MessageLevel,proto3" json:"MessageLevel,omitempty"`
	MessageCode  string                 `protobuf:"bytes,3,opt,name=MessageCode,proto3" json:"MessageCode,omitempty"`
	Message      string                 `protobuf:"bytes,4,opt,name=Message,proto3" json:"Message,omitempty"`
	LastOk       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=LastOk,proto3" json:"LastOk,omitempty"`
	LastFail     *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=LastFail,proto3" json:"LastFail,omitempty"`
}

func (x *CommonFault) Reset() {
	*x = CommonFault{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonFault) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonFault) ProtoMessage() {}

func (x *CommonFault) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonFault.ProtoReflect.Descriptor instead.
func (*CommonFault) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{11}
}

func (x *CommonFault) GetInFault() bool {
	if x != nil {
		return x.InFault
	}
	return false
}

func (x *CommonFault) GetMessageLevel() string {
	if x != nil {
		return x.MessageLevel
	}
	return ""
}

func (x *CommonFault) GetMessageCode() string {
	if x != nil {
		return x.MessageCode
	}
	return ""
}

func (x *CommonFault) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *CommonFault) GetLastOk() *timestamppb.Timestamp {
	if x != nil {
		return x.LastOk
	}
	return nil
}

func (x *CommonFault) GetLastFail() *timestamppb.Timestamp {
	if x != nil {
		return x.LastFail
	}
	return nil
}

type CommonCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CreatedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=CreatedAt,proto3" json:"CreatedAt,omitempty"`
	UpdatedAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=UpdatedAt,proto3" json:"UpdatedAt,omitempty"`
}

func (x *CommonCreated) Reset() {
	*x = CommonCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonCreated) ProtoMessage() {}

func (x *CommonCreated) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonCreated.ProtoReflect.Descriptor instead.
func (*CommonCreated) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{12}
}

func (x *CommonCreated) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *CommonCreated) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

type CommonIP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=Host,proto3" json:"Host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=Port,proto3" json:"Port,omitempty"`
}

func (x *CommonIP) Reset() {
	*x = CommonIP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonIP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonIP) ProtoMessage() {}

func (x *CommonIP) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonIP.ProtoReflect.Descriptor instead.
func (*CommonIP) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{13}
}

func (x *CommonIP) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *CommonIP) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

type CommonDevice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Manufacture       string                 `protobuf:"bytes,1,opt,name=Manufacture,proto3" json:"Manufacture,omitempty"`
	Model             string                 `protobuf:"bytes,2,opt,name=Model,proto3" json:"Model,omitempty"`
	AddressId         int32                  `protobuf:"varint,3,opt,name=AddressId,proto3" json:"AddressId,omitempty"`
	ZeroMode          bool                   `protobuf:"varint,4,opt,name=ZeroMode,proto3" json:"ZeroMode,omitempty"`
	PollDelayPointsMS *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=PollDelayPointsMS,proto3" json:"PollDelayPointsMS,omitempty"`
	AddressUUID       string                 `protobuf:"bytes,6,opt,name=AddressUUID,proto3" json:"AddressUUID,omitempty"`
	CommonIP          *CommonIP              `protobuf:"bytes,7,opt,name=CommonIP,proto3" json:"CommonIP,omitempty"`
}

func (x *CommonDevice) Reset() {
	*x = CommonDevice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonDevice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonDevice) ProtoMessage() {}

func (x *CommonDevice) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonDevice.ProtoReflect.Descriptor instead.
func (*CommonDevice) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{14}
}

func (x *CommonDevice) GetManufacture() string {
	if x != nil {
		return x.Manufacture
	}
	return ""
}

func (x *CommonDevice) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *CommonDevice) GetAddressId() int32 {
	if x != nil {
		return x.AddressId
	}
	return 0
}

func (x *CommonDevice) GetZeroMode() bool {
	if x != nil {
		return x.ZeroMode
	}
	return false
}

func (x *CommonDevice) GetPollDelayPointsMS() *timestamppb.Timestamp {
	if x != nil {
		return x.PollDelayPointsMS
	}
	return nil
}

func (x *CommonDevice) GetAddressUUID() string {
	if x != nil {
		return x.AddressUUID
	}
	return ""
}

func (x *CommonDevice) GetCommonIP() *CommonIP {
	if x != nil {
		return x.CommonIP
	}
	return nil
}

type Priority struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointUUID string  `protobuf:"bytes,1,opt,name=PointUUID,proto3" json:"PointUUID,omitempty"`
	P1        float64 `protobuf:"fixed64,2,opt,name=P1,proto3" json:"P1,omitempty"`
	P2        float64 `protobuf:"fixed64,3,opt,name=P2,proto3" json:"P2,omitempty"`
	P3        float64 `protobuf:"fixed64,4,opt,name=P3,proto3" json:"P3,omitempty"`
	P4        float64 `protobuf:"fixed64,5,opt,name=P4,proto3" json:"P4,omitempty"`
	P5        float64 `protobuf:"fixed64,6,opt,name=P5,proto3" json:"P5,omitempty"`
	P6        float64 `protobuf:"fixed64,7,opt,name=P6,proto3" json:"P6,omitempty"`
	P7        float64 `protobuf:"fixed64,8,opt,name=P7,proto3" json:"P7,omitempty"`
	P8        float64 `protobuf:"fixed64,9,opt,name=P8,proto3" json:"P8,omitempty"`
	P9        float64 `protobuf:"fixed64,10,opt,name=P9,proto3" json:"P9,omitempty"`
	P10       float64 `protobuf:"fixed64,11,opt,name=P10,proto3" json:"P10,omitempty"`
	P11       float64 `protobuf:"fixed64,12,opt,name=P11,proto3" json:"P11,omitempty"`
	P12       float64 `protobuf:"fixed64,13,opt,name=P12,proto3" json:"P12,omitempty"`
	P13       float64 `protobuf:"fixed64,14,opt,name=P13,proto3" json:"P13,omitempty"`
	P14       float64 `protobuf:"fixed64,15,opt,name=P14,proto3" json:"P14,omitempty"`
	P15       float64 `protobuf:"fixed64,16,opt,name=P15,proto3" json:"P15,omitempty"`
	P16       float64 `protobuf:"fixed64,17,opt,name=P16,proto3" json:"P16,omitempty"`
}

func (x *Priority) Reset() {
	*x = Priority{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Priority) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Priority) ProtoMessage() {}

func (x *Priority) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Priority.ProtoReflect.Descriptor instead.
func (*Priority) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{15}
}

func (x *Priority) GetPointUUID() string {
	if x != nil {
		return x.PointUUID
	}
	return ""
}

func (x *Priority) GetP1() float64 {
	if x != nil {
		return x.P1
	}
	return 0
}

func (x *Priority) GetP2() float64 {
	if x != nil {
		return x.P2
	}
	return 0
}

func (x *Priority) GetP3() float64 {
	if x != nil {
		return x.P3
	}
	return 0
}

func (x *Priority) GetP4() float64 {
	if x != nil {
		return x.P4
	}
	return 0
}

func (x *Priority) GetP5() float64 {
	if x != nil {
		return x.P5
	}
	return 0
}

func (x *Priority) GetP6() float64 {
	if x != nil {
		return x.P6
	}
	return 0
}

func (x *Priority) GetP7() float64 {
	if x != nil {
		return x.P7
	}
	return 0
}

func (x *Priority) GetP8() float64 {
	if x != nil {
		return x.P8
	}
	return 0
}

func (x *Priority) GetP9() float64 {
	if x != nil {
		return x.P9
	}
	return 0
}

func (x *Priority) GetP10() float64 {
	if x != nil {
		return x.P10
	}
	return 0
}

func (x *Priority) GetP11() float64 {
	if x != nil {
		return x.P11
	}
	return 0
}

func (x *Priority) GetP12() float64 {
	if x != nil {
		return x.P12
	}
	return 0
}

func (x *Priority) GetP13() float64 {
	if x != nil {
		return x.P13
	}
	return 0
}

func (x *Priority) GetP14() float64 {
	if x != nil {
		return x.P14
	}
	return 0
}

func (x *Priority) GetP15() float64 {
	if x != nil {
		return x.P15
	}
	return 0
}

func (x *Priority) GetP16() float64 {
	if x != nil {
		return x.P16
	}
	return 0
}

type Tag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tag      string     `protobuf:"bytes,1,opt,name=Tag,proto3" json:"Tag,omitempty"`
	Networks []*Network `protobuf:"bytes,2,rep,name=Networks,proto3" json:"Networks,omitempty"`
	Devices  []*Device  `protobuf:"bytes,3,rep,name=Devices,proto3" json:"Devices,omitempty"`
	Points   []*Point   `protobuf:"bytes,4,rep,name=Points,proto3" json:"Points,omitempty"`
}

func (x *Tag) Reset() {
	*x = Tag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tag) ProtoMessage() {}

func (x *Tag) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tag.ProtoReflect.Descriptor instead.
func (*Tag) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{16}
}

func (x *Tag) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Tag) GetNetworks() []*Network {
	if x != nil {
		return x.Networks
	}
	return nil
}

func (x *Tag) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Tag) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

type HistoryConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryEnable       bool    `protobuf:"varint,1,opt,name=HistoryEnable,proto3" json:"HistoryEnable,omitempty"`
	HistoryType         string  `protobuf:"bytes,2,opt,name=HistoryType,proto3" json:"HistoryType,omitempty"`
	HistoryInterval     int32   `protobuf:"varint,3,opt,name=HistoryInterval,proto3" json:"HistoryInterval,omitempty"`
	HistoryCOVThreshold float64 `protobuf:"fixed64,4,opt,name=HistoryCOVThreshold,proto3" json:"HistoryCOVThreshold,omitempty"`
}

func (x *HistoryConfig) Reset() {
	*x = HistoryConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HistoryConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HistoryConfig) ProtoMessage() {}

func (x *HistoryConfig) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HistoryConfig.ProtoReflect.Descriptor instead.
func (*HistoryConfig) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{17}
}

func (x *HistoryConfig) GetHistoryEnable() bool {
	if x != nil {
		return x.HistoryEnable
	}
	return false
}

func (x *HistoryConfig) GetHistoryType() string {
	if x != nil {
		return x.HistoryType
	}
	return ""
}

func (x *HistoryConfig) GetHistoryInterval() int32 {
	if x != nil {
		return x.HistoryInterval
	}
	return 0
}

func (x *HistoryConfig) GetHistoryCOVThreshold() float64 {
	if x != nil {
		return x.HistoryCOVThreshold
	}
	return 0
}

type PointMetaTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PointUUID string `protobuf:"bytes,1,opt,name=PointUUID,proto3" json:"PointUUID,omitempty"`
	Key       string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value     string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *PointMetaTag) Reset() {
	*x = PointMetaTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointMetaTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointMetaTag) ProtoMessage() {}

func (x *PointMetaTag) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointMetaTag.ProtoReflect.Descriptor instead.
func (*PointMetaTag) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{18}
}

func (x *PointMetaTag) GetPointUUID() string {
	if x != nil {
		return x.PointUUID
	}
	return ""
}

func (x *PointMetaTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *PointMetaTag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PointHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32                  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	PointUUID string                 `protobuf:"bytes,2,opt,name=PointUUID,proto3" json:"PointUUID,omitempty"`
	Value     float64                `protobuf:"fixed64,3,opt,name=Value,proto3" json:"Value,omitempty"`
	Timestamp *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Timestamp,proto3" json:"Timestamp,omitempty"`
}

func (x *PointHistory) Reset() {
	*x = PointHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointHistory) ProtoMessage() {}

func (x *PointHistory) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointHistory.ProtoReflect.Descriptor instead.
func (*PointHistory) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{19}
}

func (x *PointHistory) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *PointHistory) GetPointUUID() string {
	if x != nil {
		return x.PointUUID
	}
	return ""
}

func (x *PointHistory) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *PointHistory) GetTimestamp() *timestamppb.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

type DeviceMetaTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeviceUUID string `protobuf:"bytes,1,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	Key        string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value      string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *DeviceMetaTag) Reset() {
	*x = DeviceMetaTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeviceMetaTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeviceMetaTag) ProtoMessage() {}

func (x *DeviceMetaTag) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeviceMetaTag.ProtoReflect.Descriptor instead.
func (*DeviceMetaTag) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{20}
}

func (x *DeviceMetaTag) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *DeviceMetaTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *DeviceMetaTag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type NetworkMetaTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NetworkUUID string `protobuf:"bytes,1,opt,name=NetworkUUID,proto3" json:"NetworkUUID,omitempty"`
	Key         string `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
	Value       string `protobuf:"bytes,3,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *NetworkMetaTag) Reset() {
	*x = NetworkMetaTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkMetaTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkMetaTag) ProtoMessage() {}

func (x *NetworkMetaTag) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkMetaTag.ProtoReflect.Descriptor instead.
func (*NetworkMetaTag) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{21}
}

func (x *NetworkMetaTag) GetNetworkUUID() string {
	if x != nil {
		return x.NetworkUUID
	}
	return ""
}

func (x *NetworkMetaTag) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *NetworkMetaTag) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type CommonSourceUUID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceUUID string `protobuf:"bytes,1,opt,name=SourceUUID,proto3" json:"SourceUUID,omitempty"`
}

func (x *CommonSourceUUID) Reset() {
	*x = CommonSourceUUID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonSourceUUID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonSourceUUID) ProtoMessage() {}

func (x *CommonSourceUUID) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonSourceUUID.ProtoReflect.Descriptor instead.
func (*CommonSourceUUID) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{22}
}

func (x *CommonSourceUUID) GetSourceUUID() string {
	if x != nil {
		return x.SourceUUID
	}
	return ""
}

type CommonHistoryEnable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HistoryEnable bool `protobuf:"varint,1,opt,name=HistoryEnable,proto3" json:"HistoryEnable,omitempty"`
}

func (x *CommonHistoryEnable) Reset() {
	*x = CommonHistoryEnable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommonHistoryEnable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommonHistoryEnable) ProtoMessage() {}

func (x *CommonHistoryEnable) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommonHistoryEnable.ProtoReflect.Descriptor instead.
func (*CommonHistoryEnable) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{23}
}

func (x *CommonHistoryEnable) GetHistoryEnable() bool {
	if x != nil {
		return x.HistoryEnable
	}
	return false
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID                   string            `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                   string            `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description            string            `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Enable                 bool              `protobuf:"varint,4,opt,name=Enable,proto3" json:"Enable,omitempty"`
	CommonCreated          *CommonCreated    `protobuf:"bytes,5,opt,name=CommonCreated,proto3" json:"CommonCreated,omitempty"`
	ThingClass             string            `protobuf:"bytes,6,opt,name=ThingClass,proto3" json:"ThingClass,omitempty"`
	ThingRef               string            `protobuf:"bytes,7,opt,name=ThingRef,proto3" json:"ThingRef,omitempty"`
	ThingType              string            `protobuf:"bytes,8,opt,name=ThingType,proto3" json:"ThingType,omitempty"`
	CommonFault            *CommonFault      `protobuf:"bytes,9,opt,name=CommonFault,proto3" json:"CommonFault,omitempty"`
	PresentValue           float64           `protobuf:"fixed64,10,opt,name=PresentValue,proto3" json:"PresentValue,omitempty"`
	OriginalValue          float64           `protobuf:"fixed64,11,opt,name=OriginalValue,proto3" json:"OriginalValue,omitempty"`
	WriteValue             float64           `protobuf:"fixed64,12,opt,name=WriteValue,proto3" json:"WriteValue,omitempty"`
	WriteValueOriginal     float64           `protobuf:"fixed64,13,opt,name=WriteValueOriginal,proto3" json:"WriteValueOriginal,omitempty"`
	CurrentPriority        int32             `protobuf:"varint,14,opt,name=CurrentPriority,proto3" json:"CurrentPriority,omitempty"`
	WritePriority          int32             `protobuf:"varint,15,opt,name=WritePriority,proto3" json:"WritePriority,omitempty"`
	IsOutput               bool              `protobuf:"varint,16,opt,name=IsOutput,proto3" json:"IsOutput,omitempty"`
	IsTypeBool             bool              `protobuf:"varint,17,opt,name=IsTypeBool,proto3" json:"IsTypeBool,omitempty"`
	InSync                 bool              `protobuf:"varint,18,opt,name=InSync,proto3" json:"InSync,omitempty"`
	Fallback               float64           `protobuf:"fixed64,19,opt,name=Fallback,proto3" json:"Fallback,omitempty"`
	DeviceUUID             string            `protobuf:"bytes,20,opt,name=DeviceUUID,proto3" json:"DeviceUUID,omitempty"`
	EnableWriteable        bool              `protobuf:"varint,21,opt,name=EnableWriteable,proto3" json:"EnableWriteable,omitempty"`
	MathOnPresentValue     string            `protobuf:"bytes,22,opt,name=MathOnPresentValue,proto3" json:"MathOnPresentValue,omitempty"`
	MathOnWriteValue       string            `protobuf:"bytes,23,opt,name=MathOnWriteValue,proto3" json:"MathOnWriteValue,omitempty"`
	COV                    float64           `protobuf:"fixed64,24,opt,name=COV,proto3" json:"COV,omitempty"`
	ObjectType             string            `protobuf:"bytes,25,opt,name=ObjectType,proto3" json:"ObjectType,omitempty"`
	ObjectId               int32             `protobuf:"varint,26,opt,name=ObjectId,proto3" json:"ObjectId,omitempty"`
	DataType               string            `protobuf:"bytes,27,opt,name=DataType,proto3" json:"DataType,omitempty"`
	IsBitwise              bool              `protobuf:"varint,28,opt,name=IsBitwise,proto3" json:"IsBitwise,omitempty"`
	BitwiseIndex           int32             `protobuf:"varint,29,opt,name=BitwiseIndex,proto3" json:"BitwiseIndex,omitempty"`
	ObjectEncoding         string            `protobuf:"bytes,30,opt,name=ObjectEncoding,proto3" json:"ObjectEncoding,omitempty"`
	IoNumber               string            `protobuf:"bytes,31,opt,name=IoNumber,proto3" json:"IoNumber,omitempty"`
	IoType                 string            `protobuf:"bytes,32,opt,name=IoType,proto3" json:"IoType,omitempty"`
	AddressID              int32             `protobuf:"varint,33,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	AddressLength          int32             `protobuf:"varint,34,opt,name=AddressLength,proto3" json:"AddressLength,omitempty"`
	AddressUUID            string            `protobuf:"bytes,35,opt,name=AddressUUID,proto3" json:"AddressUUID,omitempty"`
	NextAvailableAddress   bool              `protobuf:"varint,36,opt,name=NextAvailableAddress,proto3" json:"NextAvailableAddress,omitempty"`
	Decimal                uint32            `protobuf:"varint,37,opt,name=Decimal,proto3" json:"Decimal,omitempty"`
	MultiplicationFactor   float64           `protobuf:"fixed64,38,opt,name=MultiplicationFactor,proto3" json:"MultiplicationFactor,omitempty"`
	ScaleEnable            bool              `protobuf:"varint,39,opt,name=ScaleEnable,proto3" json:"ScaleEnable,omitempty"`
	ScaleInMin             float64           `protobuf:"fixed64,40,opt,name=ScaleInMin,proto3" json:"ScaleInMin,omitempty"`
	ScaleInMax             float64           `protobuf:"fixed64,41,opt,name=ScaleInMax,proto3" json:"ScaleInMax,omitempty"`
	ScaleOutMin            float64           `protobuf:"fixed64,42,opt,name=ScaleOutMin,proto3" json:"ScaleOutMin,omitempty"`
	ScaleOutMax            float64           `protobuf:"fixed64,43,opt,name=ScaleOutMax,proto3" json:"ScaleOutMax,omitempty"`
	Offset                 float64           `protobuf:"fixed64,44,opt,name=Offset,proto3" json:"Offset,omitempty"`
	UnitType               string            `protobuf:"bytes,45,opt,name=UnitType,proto3" json:"UnitType,omitempty"`
	Unit                   string            `protobuf:"bytes,46,opt,name=Unit,proto3" json:"Unit,omitempty"`
	UnitTo                 string            `protobuf:"bytes,47,opt,name=UnitTo,proto3" json:"UnitTo,omitempty"`
	Priority               *Priority         `protobuf:"bytes,48,opt,name=Priority,proto3" json:"Priority,omitempty"`
	Tags                   []*Tag            `protobuf:"bytes,49,rep,name=Tags,proto3" json:"Tags,omitempty"`
	ValueUpdatedFlag       bool              `protobuf:"varint,50,opt,name=ValueUpdatedFlag,proto3" json:"ValueUpdatedFlag,omitempty"`
	PointPriorityArrayMode string            `protobuf:"bytes,51,opt,name=PointPriorityArrayMode,proto3" json:"PointPriorityArrayMode,omitempty"`
	WriteMode              string            `protobuf:"bytes,52,opt,name=WriteMode,proto3" json:"WriteMode,omitempty"`
	WritePollRequired      bool              `protobuf:"varint,53,opt,name=WritePollRequired,proto3" json:"WritePollRequired,omitempty"`
	ReadPollRequired       bool              `protobuf:"varint,54,opt,name=ReadPollRequired,proto3" json:"ReadPollRequired,omitempty"`
	PollPriority           string            `protobuf:"bytes,55,opt,name=PollPriority,proto3" json:"PollPriority,omitempty"`
	PollRate               string            `protobuf:"bytes,56,opt,name=PollRate,proto3" json:"PollRate,omitempty"`
	BACnetWriteToPV        bool              `protobuf:"varint,57,opt,name=BACnetWriteToPV,proto3" json:"BACnetWriteToPV,omitempty"`
	HistoryConfig          *HistoryConfig    `protobuf:"bytes,58,opt,name=HistoryConfig,proto3" json:"HistoryConfig,omitempty"`
	MetaTags               []*PointMetaTag   `protobuf:"bytes,59,rep,name=MetaTags,proto3" json:"MetaTags,omitempty"`
	Connection             string            `protobuf:"bytes,60,opt,name=Connection,proto3" json:"Connection,omitempty"`
	ConnectionMessage      string            `protobuf:"bytes,61,opt,name=ConnectionMessage,proto3" json:"ConnectionMessage,omitempty"`
	PointHistories         []*PointHistory   `protobuf:"bytes,62,rep,name=PointHistories,proto3" json:"PointHistories,omitempty"`
	CommonSourceUUID       *CommonSourceUUID `protobuf:"bytes,63,opt,name=CommonSourceUUID,proto3" json:"CommonSourceUUID,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{24}
}

func (x *Point) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Point) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Point) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Point) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Point) GetCommonCreated() *CommonCreated {
	if x != nil {
		return x.CommonCreated
	}
	return nil
}

func (x *Point) GetThingClass() string {
	if x != nil {
		return x.ThingClass
	}
	return ""
}

func (x *Point) GetThingRef() string {
	if x != nil {
		return x.ThingRef
	}
	return ""
}

func (x *Point) GetThingType() string {
	if x != nil {
		return x.ThingType
	}
	return ""
}

func (x *Point) GetCommonFault() *CommonFault {
	if x != nil {
		return x.CommonFault
	}
	return nil
}

func (x *Point) GetPresentValue() float64 {
	if x != nil {
		return x.PresentValue
	}
	return 0
}

func (x *Point) GetOriginalValue() float64 {
	if x != nil {
		return x.OriginalValue
	}
	return 0
}

func (x *Point) GetWriteValue() float64 {
	if x != nil {
		return x.WriteValue
	}
	return 0
}

func (x *Point) GetWriteValueOriginal() float64 {
	if x != nil {
		return x.WriteValueOriginal
	}
	return 0
}

func (x *Point) GetCurrentPriority() int32 {
	if x != nil {
		return x.CurrentPriority
	}
	return 0
}

func (x *Point) GetWritePriority() int32 {
	if x != nil {
		return x.WritePriority
	}
	return 0
}

func (x *Point) GetIsOutput() bool {
	if x != nil {
		return x.IsOutput
	}
	return false
}

func (x *Point) GetIsTypeBool() bool {
	if x != nil {
		return x.IsTypeBool
	}
	return false
}

func (x *Point) GetInSync() bool {
	if x != nil {
		return x.InSync
	}
	return false
}

func (x *Point) GetFallback() float64 {
	if x != nil {
		return x.Fallback
	}
	return 0
}

func (x *Point) GetDeviceUUID() string {
	if x != nil {
		return x.DeviceUUID
	}
	return ""
}

func (x *Point) GetEnableWriteable() bool {
	if x != nil {
		return x.EnableWriteable
	}
	return false
}

func (x *Point) GetMathOnPresentValue() string {
	if x != nil {
		return x.MathOnPresentValue
	}
	return ""
}

func (x *Point) GetMathOnWriteValue() string {
	if x != nil {
		return x.MathOnWriteValue
	}
	return ""
}

func (x *Point) GetCOV() float64 {
	if x != nil {
		return x.COV
	}
	return 0
}

func (x *Point) GetObjectType() string {
	if x != nil {
		return x.ObjectType
	}
	return ""
}

func (x *Point) GetObjectId() int32 {
	if x != nil {
		return x.ObjectId
	}
	return 0
}

func (x *Point) GetDataType() string {
	if x != nil {
		return x.DataType
	}
	return ""
}

func (x *Point) GetIsBitwise() bool {
	if x != nil {
		return x.IsBitwise
	}
	return false
}

func (x *Point) GetBitwiseIndex() int32 {
	if x != nil {
		return x.BitwiseIndex
	}
	return 0
}

func (x *Point) GetObjectEncoding() string {
	if x != nil {
		return x.ObjectEncoding
	}
	return ""
}

func (x *Point) GetIoNumber() string {
	if x != nil {
		return x.IoNumber
	}
	return ""
}

func (x *Point) GetIoType() string {
	if x != nil {
		return x.IoType
	}
	return ""
}

func (x *Point) GetAddressID() int32 {
	if x != nil {
		return x.AddressID
	}
	return 0
}

func (x *Point) GetAddressLength() int32 {
	if x != nil {
		return x.AddressLength
	}
	return 0
}

func (x *Point) GetAddressUUID() string {
	if x != nil {
		return x.AddressUUID
	}
	return ""
}

func (x *Point) GetNextAvailableAddress() bool {
	if x != nil {
		return x.NextAvailableAddress
	}
	return false
}

func (x *Point) GetDecimal() uint32 {
	if x != nil {
		return x.Decimal
	}
	return 0
}

func (x *Point) GetMultiplicationFactor() float64 {
	if x != nil {
		return x.MultiplicationFactor
	}
	return 0
}

func (x *Point) GetScaleEnable() bool {
	if x != nil {
		return x.ScaleEnable
	}
	return false
}

func (x *Point) GetScaleInMin() float64 {
	if x != nil {
		return x.ScaleInMin
	}
	return 0
}

func (x *Point) GetScaleInMax() float64 {
	if x != nil {
		return x.ScaleInMax
	}
	return 0
}

func (x *Point) GetScaleOutMin() float64 {
	if x != nil {
		return x.ScaleOutMin
	}
	return 0
}

func (x *Point) GetScaleOutMax() float64 {
	if x != nil {
		return x.ScaleOutMax
	}
	return 0
}

func (x *Point) GetOffset() float64 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *Point) GetUnitType() string {
	if x != nil {
		return x.UnitType
	}
	return ""
}

func (x *Point) GetUnit() string {
	if x != nil {
		return x.Unit
	}
	return ""
}

func (x *Point) GetUnitTo() string {
	if x != nil {
		return x.UnitTo
	}
	return ""
}

func (x *Point) GetPriority() *Priority {
	if x != nil {
		return x.Priority
	}
	return nil
}

func (x *Point) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Point) GetValueUpdatedFlag() bool {
	if x != nil {
		return x.ValueUpdatedFlag
	}
	return false
}

func (x *Point) GetPointPriorityArrayMode() string {
	if x != nil {
		return x.PointPriorityArrayMode
	}
	return ""
}

func (x *Point) GetWriteMode() string {
	if x != nil {
		return x.WriteMode
	}
	return ""
}

func (x *Point) GetWritePollRequired() bool {
	if x != nil {
		return x.WritePollRequired
	}
	return false
}

func (x *Point) GetReadPollRequired() bool {
	if x != nil {
		return x.ReadPollRequired
	}
	return false
}

func (x *Point) GetPollPriority() string {
	if x != nil {
		return x.PollPriority
	}
	return ""
}

func (x *Point) GetPollRate() string {
	if x != nil {
		return x.PollRate
	}
	return ""
}

func (x *Point) GetBACnetWriteToPV() bool {
	if x != nil {
		return x.BACnetWriteToPV
	}
	return false
}

func (x *Point) GetHistoryConfig() *HistoryConfig {
	if x != nil {
		return x.HistoryConfig
	}
	return nil
}

func (x *Point) GetMetaTags() []*PointMetaTag {
	if x != nil {
		return x.MetaTags
	}
	return nil
}

func (x *Point) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Point) GetConnectionMessage() string {
	if x != nil {
		return x.ConnectionMessage
	}
	return ""
}

func (x *Point) GetPointHistories() []*PointHistory {
	if x != nil {
		return x.PointHistories
	}
	return nil
}

func (x *Point) GetCommonSourceUUID() *CommonSourceUUID {
	if x != nil {
		return x.CommonSourceUUID
	}
	return nil
}

type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID                     string           `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                     string           `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description              string           `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Enable                   bool             `protobuf:"varint,4,opt,name=Enable,proto3" json:"Enable,omitempty"`
	CommonFault              *CommonFault     `protobuf:"bytes,5,opt,name=CommonFault,proto3" json:"CommonFault,omitempty"`
	CommonCreated            *CommonCreated   `protobuf:"bytes,6,opt,name=CommonCreated,proto3" json:"CommonCreated,omitempty"`
	ThingClass               string           `protobuf:"bytes,7,opt,name=ThingClass,proto3" json:"ThingClass,omitempty"`
	ThingRef                 string           `protobuf:"bytes,8,opt,name=ThingRef,proto3" json:"ThingRef,omitempty"`
	ThingType                string           `protobuf:"bytes,9,opt,name=ThingType,proto3" json:"ThingType,omitempty"`
	CommonDevice             *CommonDevice    `protobuf:"bytes,10,opt,name=CommonDevice,proto3" json:"CommonDevice,omitempty"`
	DeviceMac                int32            `protobuf:"varint,11,opt,name=DeviceMac,proto3" json:"DeviceMac,omitempty"`
	DeviceObjectId           int32            `protobuf:"varint,12,opt,name=DeviceObjectId,proto3" json:"DeviceObjectId,omitempty"`
	NetworkNumber            int32            `protobuf:"varint,13,opt,name=NetworkNumber,proto3" json:"NetworkNumber,omitempty"`
	MaxADPU                  int32            `protobuf:"varint,14,opt,name=MaxADPU,proto3" json:"MaxADPU,omitempty"`
	Segmentation             string           `protobuf:"bytes,15,opt,name=Segmentation,proto3" json:"Segmentation,omitempty"`
	DeviceMask               int32            `protobuf:"varint,16,opt,name=DeviceMask,proto3" json:"DeviceMask,omitempty"`
	TypeSerial               bool             `protobuf:"varint,17,opt,name=TypeSerial,proto3" json:"TypeSerial,omitempty"`
	TransportType            string           `protobuf:"bytes,18,opt,name=TransportType,proto3" json:"TransportType,omitempty"`
	SupportsRpm              bool             `protobuf:"varint,19,opt,name=SupportsRpm,proto3" json:"SupportsRpm,omitempty"`
	SupportsWpm              bool             `protobuf:"varint,20,opt,name=SupportsWpm,proto3" json:"SupportsWpm,omitempty"`
	NetworkUUID              string           `protobuf:"bytes,21,opt,name=NetworkUUID,proto3" json:"NetworkUUID,omitempty"`
	NumberOfDevicesPermitted int32            `protobuf:"varint,22,opt,name=NumberOfDevicesPermitted,proto3" json:"NumberOfDevicesPermitted,omitempty"`
	Points                   []*Point         `protobuf:"bytes,23,rep,name=Points,proto3" json:"Points,omitempty"`
	Tags                     []*Tag           `protobuf:"bytes,24,rep,name=Tags,proto3" json:"Tags,omitempty"`
	FastPollRate             float64          `protobuf:"fixed64,25,opt,name=FastPollRate,proto3" json:"FastPollRate,omitempty"`
	NormalPollRate           float64          `protobuf:"fixed64,26,opt,name=NormalPollRate,proto3" json:"NormalPollRate,omitempty"`
	SlowPollRate             float64          `protobuf:"fixed64,27,opt,name=SlowPollRate,proto3" json:"SlowPollRate,omitempty"`
	DeviceTimeout            int32            `protobuf:"varint,28,opt,name=DeviceTimeout,proto3" json:"DeviceTimeout,omitempty"`
	MetaTags                 []*DeviceMetaTag `protobuf:"bytes,29,rep,name=MetaTags,proto3" json:"MetaTags,omitempty"`
	Connection               string           `protobuf:"bytes,30,opt,name=Connection,proto3" json:"Connection,omitempty"`
	ConnectionMessage        string           `protobuf:"bytes,31,opt,name=ConnectionMessage,proto3" json:"ConnectionMessage,omitempty"`
	SourceUUID               string           `protobuf:"bytes,32,opt,name=SourceUUID,proto3" json:"SourceUUID,omitempty"`
	HistoryEnable            bool             `protobuf:"varint,33,opt,name=HistoryEnable,proto3" json:"HistoryEnable,omitempty"`
}

func (x *Device) Reset() {
	*x = Device{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{25}
}

func (x *Device) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Device) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Device) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Device) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Device) GetCommonFault() *CommonFault {
	if x != nil {
		return x.CommonFault
	}
	return nil
}

func (x *Device) GetCommonCreated() *CommonCreated {
	if x != nil {
		return x.CommonCreated
	}
	return nil
}

func (x *Device) GetThingClass() string {
	if x != nil {
		return x.ThingClass
	}
	return ""
}

func (x *Device) GetThingRef() string {
	if x != nil {
		return x.ThingRef
	}
	return ""
}

func (x *Device) GetThingType() string {
	if x != nil {
		return x.ThingType
	}
	return ""
}

func (x *Device) GetCommonDevice() *CommonDevice {
	if x != nil {
		return x.CommonDevice
	}
	return nil
}

func (x *Device) GetDeviceMac() int32 {
	if x != nil {
		return x.DeviceMac
	}
	return 0
}

func (x *Device) GetDeviceObjectId() int32 {
	if x != nil {
		return x.DeviceObjectId
	}
	return 0
}

func (x *Device) GetNetworkNumber() int32 {
	if x != nil {
		return x.NetworkNumber
	}
	return 0
}

func (x *Device) GetMaxADPU() int32 {
	if x != nil {
		return x.MaxADPU
	}
	return 0
}

func (x *Device) GetSegmentation() string {
	if x != nil {
		return x.Segmentation
	}
	return ""
}

func (x *Device) GetDeviceMask() int32 {
	if x != nil {
		return x.DeviceMask
	}
	return 0
}

func (x *Device) GetTypeSerial() bool {
	if x != nil {
		return x.TypeSerial
	}
	return false
}

func (x *Device) GetTransportType() string {
	if x != nil {
		return x.TransportType
	}
	return ""
}

func (x *Device) GetSupportsRpm() bool {
	if x != nil {
		return x.SupportsRpm
	}
	return false
}

func (x *Device) GetSupportsWpm() bool {
	if x != nil {
		return x.SupportsWpm
	}
	return false
}

func (x *Device) GetNetworkUUID() string {
	if x != nil {
		return x.NetworkUUID
	}
	return ""
}

func (x *Device) GetNumberOfDevicesPermitted() int32 {
	if x != nil {
		return x.NumberOfDevicesPermitted
	}
	return 0
}

func (x *Device) GetPoints() []*Point {
	if x != nil {
		return x.Points
	}
	return nil
}

func (x *Device) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Device) GetFastPollRate() float64 {
	if x != nil {
		return x.FastPollRate
	}
	return 0
}

func (x *Device) GetNormalPollRate() float64 {
	if x != nil {
		return x.NormalPollRate
	}
	return 0
}

func (x *Device) GetSlowPollRate() float64 {
	if x != nil {
		return x.SlowPollRate
	}
	return 0
}

func (x *Device) GetDeviceTimeout() int32 {
	if x != nil {
		return x.DeviceTimeout
	}
	return 0
}

func (x *Device) GetMetaTags() []*DeviceMetaTag {
	if x != nil {
		return x.MetaTags
	}
	return nil
}

func (x *Device) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *Device) GetConnectionMessage() string {
	if x != nil {
		return x.ConnectionMessage
	}
	return ""
}

func (x *Device) GetSourceUUID() string {
	if x != nil {
		return x.SourceUUID
	}
	return ""
}

func (x *Device) GetHistoryEnable() bool {
	if x != nil {
		return x.HistoryEnable
	}
	return false
}

type Network struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UUID                      string               `protobuf:"bytes,1,opt,name=UUID,proto3" json:"UUID,omitempty"`
	Name                      string               `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
	Description               string               `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	Enable                    bool                 `protobuf:"varint,4,opt,name=Enable,proto3" json:"Enable,omitempty"`
	CommonFault               *CommonFault         `protobuf:"bytes,5,opt,name=CommonFault,proto3" json:"CommonFault,omitempty"`
	CommonCreated             *CommonCreated       `protobuf:"bytes,6,opt,name=CommonCreated,proto3" json:"CommonCreated,omitempty"`
	Manufacture               string               `protobuf:"bytes,7,opt,name=Manufacture,proto3" json:"Manufacture,omitempty"`
	Model                     string               `protobuf:"bytes,8,opt,name=Model,proto3" json:"Model,omitempty"`
	WriteableNetwork          bool                 `protobuf:"varint,9,opt,name=WriteableNetwork,proto3" json:"WriteableNetwork,omitempty"`
	ThingClass                string               `protobuf:"bytes,10,opt,name=ThingClass,proto3" json:"ThingClass,omitempty"`
	ThingRef                  string               `protobuf:"bytes,11,opt,name=ThingRef,proto3" json:"ThingRef,omitempty"`
	ThingType                 string               `protobuf:"bytes,12,opt,name=ThingType,proto3" json:"ThingType,omitempty"`
	TransportType             string               `protobuf:"bytes,13,opt,name=TransportType,proto3" json:"TransportType,omitempty"`
	PluginConfId              string               `protobuf:"bytes,14,opt,name=PluginConfId,proto3" json:"PluginConfId,omitempty"`
	PluginPath                string               `protobuf:"bytes,15,opt,name=PluginPath,proto3" json:"PluginPath,omitempty"`
	NumberOfNetworksPermitted int32                `protobuf:"varint,16,opt,name=NumberOfNetworksPermitted,proto3" json:"NumberOfNetworksPermitted,omitempty"`
	NetworkInterface          string               `protobuf:"bytes,17,opt,name=NetworkInterface,proto3" json:"NetworkInterface,omitempty"`
	IP                        string               `protobuf:"bytes,18,opt,name=IP,proto3" json:"IP,omitempty"`
	Port                      int32                `protobuf:"varint,19,opt,name=Port,proto3" json:"Port,omitempty"`
	NetworkMask               int32                `protobuf:"varint,20,opt,name=NetworkMask,proto3" json:"NetworkMask,omitempty"`
	AddressID                 string               `protobuf:"bytes,21,opt,name=AddressID,proto3" json:"AddressID,omitempty"`
	AddressUUID               string               `protobuf:"bytes,22,opt,name=AddressUUID,proto3" json:"AddressUUID,omitempty"`
	SerialPort                string               `protobuf:"bytes,23,opt,name=SerialPort,proto3" json:"SerialPort,omitempty"`
	SerialBaudRate            uint32               `protobuf:"varint,24,opt,name=SerialBaudRate,proto3" json:"SerialBaudRate,omitempty"`
	SerialStopBits            uint32               `protobuf:"varint,25,opt,name=SerialStopBits,proto3" json:"SerialStopBits,omitempty"`
	SerialParity              string               `protobuf:"bytes,26,opt,name=SerialParity,proto3" json:"SerialParity,omitempty"`
	SerialDataBits            uint32               `protobuf:"varint,27,opt,name=SerialDataBits,proto3" json:"SerialDataBits,omitempty"`
	SerialTimeout             int32                `protobuf:"varint,28,opt,name=SerialTimeout,proto3" json:"SerialTimeout,omitempty"`
	SerialConnected           bool                 `protobuf:"varint,29,opt,name=SerialConnected,proto3" json:"SerialConnected,omitempty"`
	Host                      string               `protobuf:"bytes,30,opt,name=Host,proto3" json:"Host,omitempty"`
	Devices                   []*Device            `protobuf:"bytes,31,rep,name=Devices,proto3" json:"Devices,omitempty"`
	Tags                      []*Tag               `protobuf:"bytes,32,rep,name=Tags,proto3" json:"Tags,omitempty"`
	MaxPollRate               float64              `protobuf:"fixed64,33,opt,name=MaxPollRate,proto3" json:"MaxPollRate,omitempty"`
	MetaTags                  []*NetworkMetaTag    `protobuf:"bytes,34,rep,name=MetaTags,proto3" json:"MetaTags,omitempty"`
	HasPollingStatistics      bool                 `protobuf:"varint,35,opt,name=HasPollingStatistics,proto3" json:"HasPollingStatistics,omitempty"`
	GlobalUUID                string               `protobuf:"bytes,36,opt,name=GlobalUUID,proto3" json:"GlobalUUID,omitempty"`
	Connections               string               `protobuf:"bytes,37,opt,name=Connections,proto3" json:"Connections,omitempty"`
	ConnectionMessage         string               `protobuf:"bytes,38,opt,name=ConnectionMessage,proto3" json:"ConnectionMessage,omitempty"`
	CommonSourceUUID          *CommonSourceUUID    `protobuf:"bytes,39,opt,name=CommonSourceUUID,proto3" json:"CommonSourceUUID,omitempty"`
	SourcePluginName          string               `protobuf:"bytes,40,opt,name=SourcePluginName,proto3" json:"SourcePluginName,omitempty"`
	IsClone                   bool                 `protobuf:"varint,41,opt,name=IsClone,proto3" json:"IsClone,omitempty"`
	HostUUID                  string               `protobuf:"bytes,42,opt,name=HostUUID,proto3" json:"HostUUID,omitempty"`
	CommonHistoryEnable       *CommonHistoryEnable `protobuf:"bytes,43,opt,name=CommonHistoryEnable,proto3" json:"CommonHistoryEnable,omitempty"`
}

func (x *Network) Reset() {
	*x = Network{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Network) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Network) ProtoMessage() {}

func (x *Network) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Network.ProtoReflect.Descriptor instead.
func (*Network) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{26}
}

func (x *Network) GetUUID() string {
	if x != nil {
		return x.UUID
	}
	return ""
}

func (x *Network) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Network) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Network) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *Network) GetCommonFault() *CommonFault {
	if x != nil {
		return x.CommonFault
	}
	return nil
}

func (x *Network) GetCommonCreated() *CommonCreated {
	if x != nil {
		return x.CommonCreated
	}
	return nil
}

func (x *Network) GetManufacture() string {
	if x != nil {
		return x.Manufacture
	}
	return ""
}

func (x *Network) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Network) GetWriteableNetwork() bool {
	if x != nil {
		return x.WriteableNetwork
	}
	return false
}

func (x *Network) GetThingClass() string {
	if x != nil {
		return x.ThingClass
	}
	return ""
}

func (x *Network) GetThingRef() string {
	if x != nil {
		return x.ThingRef
	}
	return ""
}

func (x *Network) GetThingType() string {
	if x != nil {
		return x.ThingType
	}
	return ""
}

func (x *Network) GetTransportType() string {
	if x != nil {
		return x.TransportType
	}
	return ""
}

func (x *Network) GetPluginConfId() string {
	if x != nil {
		return x.PluginConfId
	}
	return ""
}

func (x *Network) GetPluginPath() string {
	if x != nil {
		return x.PluginPath
	}
	return ""
}

func (x *Network) GetNumberOfNetworksPermitted() int32 {
	if x != nil {
		return x.NumberOfNetworksPermitted
	}
	return 0
}

func (x *Network) GetNetworkInterface() string {
	if x != nil {
		return x.NetworkInterface
	}
	return ""
}

func (x *Network) GetIP() string {
	if x != nil {
		return x.IP
	}
	return ""
}

func (x *Network) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Network) GetNetworkMask() int32 {
	if x != nil {
		return x.NetworkMask
	}
	return 0
}

func (x *Network) GetAddressID() string {
	if x != nil {
		return x.AddressID
	}
	return ""
}

func (x *Network) GetAddressUUID() string {
	if x != nil {
		return x.AddressUUID
	}
	return ""
}

func (x *Network) GetSerialPort() string {
	if x != nil {
		return x.SerialPort
	}
	return ""
}

func (x *Network) GetSerialBaudRate() uint32 {
	if x != nil {
		return x.SerialBaudRate
	}
	return 0
}

func (x *Network) GetSerialStopBits() uint32 {
	if x != nil {
		return x.SerialStopBits
	}
	return 0
}

func (x *Network) GetSerialParity() string {
	if x != nil {
		return x.SerialParity
	}
	return ""
}

func (x *Network) GetSerialDataBits() uint32 {
	if x != nil {
		return x.SerialDataBits
	}
	return 0
}

func (x *Network) GetSerialTimeout() int32 {
	if x != nil {
		return x.SerialTimeout
	}
	return 0
}

func (x *Network) GetSerialConnected() bool {
	if x != nil {
		return x.SerialConnected
	}
	return false
}

func (x *Network) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Network) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

func (x *Network) GetTags() []*Tag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *Network) GetMaxPollRate() float64 {
	if x != nil {
		return x.MaxPollRate
	}
	return 0
}

func (x *Network) GetMetaTags() []*NetworkMetaTag {
	if x != nil {
		return x.MetaTags
	}
	return nil
}

func (x *Network) GetHasPollingStatistics() bool {
	if x != nil {
		return x.HasPollingStatistics
	}
	return false
}

func (x *Network) GetGlobalUUID() string {
	if x != nil {
		return x.GlobalUUID
	}
	return ""
}

func (x *Network) GetConnections() string {
	if x != nil {
		return x.Connections
	}
	return ""
}

func (x *Network) GetConnectionMessage() string {
	if x != nil {
		return x.ConnectionMessage
	}
	return ""
}

func (x *Network) GetCommonSourceUUID() *CommonSourceUUID {
	if x != nil {
		return x.CommonSourceUUID
	}
	return nil
}

func (x *Network) GetSourcePluginName() string {
	if x != nil {
		return x.SourcePluginName
	}
	return ""
}

func (x *Network) GetIsClone() bool {
	if x != nil {
		return x.IsClone
	}
	return false
}

func (x *Network) GetHostUUID() string {
	if x != nil {
		return x.HostUUID
	}
	return ""
}

func (x *Network) GetCommonHistoryEnable() *CommonHistoryEnable {
	if x != nil {
		return x.CommonHistoryEnable
	}
	return nil
}

type WizardNewNetworkDevicePointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Plugin string   `protobuf:"bytes,1,opt,name=plugin,proto3" json:"plugin,omitempty"`
	Net    *Network `protobuf:"bytes,2,opt,name=net,proto3" json:"net,omitempty"`
	Dev    *Device  `protobuf:"bytes,3,opt,name=dev,proto3" json:"dev,omitempty"`
	Pnt    *Point   `protobuf:"bytes,4,opt,name=pnt,proto3" json:"pnt,omitempty"`
}

func (x *WizardNewNetworkDevicePointRequest) Reset() {
	*x = WizardNewNetworkDevicePointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WizardNewNetworkDevicePointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WizardNewNetworkDevicePointRequest) ProtoMessage() {}

func (x *WizardNewNetworkDevicePointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WizardNewNetworkDevicePointRequest.ProtoReflect.Descriptor instead.
func (*WizardNewNetworkDevicePointRequest) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{27}
}

func (x *WizardNewNetworkDevicePointRequest) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *WizardNewNetworkDevicePointRequest) GetNet() *Network {
	if x != nil {
		return x.Net
	}
	return nil
}

func (x *WizardNewNetworkDevicePointRequest) GetDev() *Device {
	if x != nil {
		return x.Dev
	}
	return nil
}

func (x *WizardNewNetworkDevicePointRequest) GetPnt() *Point {
	if x != nil {
		return x.Pnt
	}
	return nil
}

type BoolResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R bool `protobuf:"varint,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *BoolResponse) Reset() {
	*x = BoolResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolResponse) ProtoMessage() {}

func (x *BoolResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolResponse.ProtoReflect.Descriptor instead.
func (*BoolResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{28}
}

func (x *BoolResponse) GetR() bool {
	if x != nil {
		return x.R
	}
	return false
}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R []byte `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{29}
}

func (x *Response) GetR() []byte {
	if x != nil {
		return x.R
	}
	return nil
}

type InfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	Author     string `protobuf:"bytes,2,opt,name=Author,proto3" json:"Author,omitempty"`
	Website    string `protobuf:"bytes,3,opt,name=Website,proto3" json:"Website,omitempty"`
	License    string `protobuf:"bytes,4,opt,name=License,proto3" json:"License,omitempty"`
	HasNetwork bool   `protobuf:"varint,5,opt,name=HasNetwork,proto3" json:"HasNetwork,omitempty"`
}

func (x *InfoResponse) Reset() {
	*x = InfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InfoResponse) ProtoMessage() {}

func (x *InfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InfoResponse.ProtoReflect.Descriptor instead.
func (*InfoResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{30}
}

func (x *InfoResponse) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *InfoResponse) GetAuthor() string {
	if x != nil {
		return x.Author
	}
	return ""
}

func (x *InfoResponse) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *InfoResponse) GetLicense() string {
	if x != nil {
		return x.License
	}
	return ""
}

func (x *InfoResponse) GetHasNetwork() bool {
	if x != nil {
		return x.HasNetwork
	}
	return false
}

type UrlPrefixResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	R string `protobuf:"bytes,1,opt,name=r,proto3" json:"r,omitempty"`
}

func (x *UrlPrefixResponse) Reset() {
	*x = UrlPrefixResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_module_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UrlPrefixResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UrlPrefixResponse) ProtoMessage() {}

func (x *UrlPrefixResponse) ProtoReflect() protoreflect.Message {
	mi := &file_module_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UrlPrefixResponse.ProtoReflect.Descriptor instead.
func (*UrlPrefixResponse) Descriptor() ([]byte, []int) {
	return file_module_proto_rawDescGZIP(), []int{31}
}

func (x *UrlPrefixResponse) GetR() string {
	if x != nil {
		return x.R
	}
	return ""
}

var File_module_proto protoreflect.FileDescriptor

var file_module_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4d, 0x0a, 0x0b, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x64, 0x64, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x61, 0x64, 0x64, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x07, 0x0a, 0x05, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x24,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x22, 0x40, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f,
	0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x22, 0x48, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0x35, 0x0a, 0x0b, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70,
	0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x48, 0x0a, 0x0a, 0x50, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x22, 0x4a, 0x0a, 0x0c, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x37, 0x0a,
	0x0d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x16, 0x53, 0x65, 0x74, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x18, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x6f, 0x50,
	0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xf3, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x49, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12,
	0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x32, 0x0a, 0x06, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x06, 0x4c, 0x61, 0x73,
	0x74, 0x4f, 0x6b, 0x12, 0x36, 0x0a, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x08, 0x4c, 0x61, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x38, 0x0a,
	0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41,
	0x74, 0x22, 0x32, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x50, 0x12, 0x12, 0x0a,
	0x04, 0x48, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x99, 0x02, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x6e,
	0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x5a, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x5a, 0x65, 0x72, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48, 0x0a, 0x11, 0x50, 0x6f, 0x6c, 0x6c,
	0x44, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x4d, 0x53, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x11, 0x50, 0x6f, 0x6c, 0x6c, 0x44, 0x65, 0x6c, 0x61, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x4d, 0x53, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x2b, 0x0a, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x50,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49, 0x50, 0x52, 0x08, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x49,
	0x50, 0x22, 0xb6, 0x02, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x31, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x32, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x33, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x33, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x34, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x34, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x35, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x35, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x36, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x36, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x37, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x37, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x38, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x38, 0x12, 0x0e, 0x0a, 0x02,
	0x50, 0x39, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x02, 0x50, 0x39, 0x12, 0x10, 0x0a, 0x03,
	0x50, 0x31, 0x30, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x50, 0x31, 0x30, 0x12, 0x10,
	0x0a, 0x03, 0x50, 0x31, 0x31, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x50, 0x31, 0x31,
	0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x32, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x50,
	0x31, 0x32, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x33, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x03, 0x50, 0x31, 0x33, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x34, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x03, 0x50, 0x31, 0x34, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x35, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x03, 0x50, 0x31, 0x35, 0x12, 0x10, 0x0a, 0x03, 0x50, 0x31, 0x36, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x50, 0x31, 0x36, 0x22, 0x92, 0x01, 0x0a, 0x03, 0x54,
	0x61, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x54, 0x61, 0x67, 0x12, 0x2a, 0x0a, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x08, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x12, 0x27, 0x0a, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x07, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x24, 0x0a, 0x06, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0xb3, 0x01, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x4f,
	0x56, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x13, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x4f, 0x56, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x22, 0x54, 0x0a, 0x0c, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65,
	0x74, 0x61, 0x54, 0x61, 0x67, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0c,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x38, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x57, 0x0a, 0x0d, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x5a, 0x0a, 0x0e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65,
	0x74, 0x61, 0x54, 0x61, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77,
	0x6f, 0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x12, 0x10, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x32, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x22, 0x3b, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x22, 0xfb, 0x11, 0x0a, 0x05, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x72, 0x65, 0x73,
	0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0d, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x2e, 0x0a, 0x12, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x01, 0x52, 0x12,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e,
	0x61, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x24, 0x0a, 0x0d,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x49, 0x73, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x1e,
	0x0a, 0x0a, 0x49, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x49, 0x73, 0x54, 0x79, 0x70, 0x65, 0x42, 0x6f, 0x6f, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06,
	0x49, 0x6e, 0x53, 0x79, 0x6e, 0x63, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x18, 0x13, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x46, 0x61, 0x6c, 0x6c, 0x62, 0x61,
	0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x57, 0x72, 0x69, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x12,
	0x4d, 0x61, 0x74, 0x68, 0x4f, 0x6e, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x4d, 0x61, 0x74, 0x68, 0x4f, 0x6e,
	0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x10,
	0x4d, 0x61, 0x74, 0x68, 0x4f, 0x6e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4d, 0x61, 0x74, 0x68, 0x4f, 0x6e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x43, 0x4f, 0x56, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x01, 0x52, 0x03, 0x43, 0x4f, 0x56, 0x12, 0x1e, 0x0a, 0x0a, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x49, 0x73, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x18,
	0x1c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x49, 0x73, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65,
	0x12, 0x22, 0x0a, 0x0c, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x42, 0x69, 0x74, 0x77, 0x69, 0x73, 0x65, 0x49,
	0x6e, 0x64, 0x65, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x49, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x49, 0x6f, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x49, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x20, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x49, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x21, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18,
	0x22, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x4c, 0x65,
	0x6e, 0x67, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x23, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x55, 0x55, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x4e, 0x65, 0x78, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x44, 0x65,
	0x63, 0x69, 0x6d, 0x61, 0x6c, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x44, 0x65, 0x63,
	0x69, 0x6d, 0x61, 0x6c, 0x12, 0x32, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x26, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63, 0x61, 0x6c,
	0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53,
	0x63, 0x61, 0x6c, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x18, 0x28, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x78, 0x18, 0x29, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x49, 0x6e, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x63,
	0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b,
	0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x53, 0x63, 0x61, 0x6c, 0x65, 0x4f, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x16,
	0x0a, 0x06, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06,
	0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x6f,
	0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x6e, 0x69, 0x74, 0x54, 0x6f, 0x12, 0x2b,
	0x0a, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74,
	0x79, 0x52, 0x08, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1e, 0x0a, 0x04, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x31, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x64, 0x46, 0x6c, 0x61, 0x67, 0x12, 0x36, 0x0a, 0x16, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x33, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x50, 0x72,
	0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a,
	0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x18, 0x35, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x52,
	0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18,
	0x36, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x52, 0x65, 0x61, 0x64, 0x50, 0x6f, 0x6c, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6f, 0x6c, 0x6c, 0x50,
	0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x37, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x6f, 0x6c, 0x6c, 0x50, 0x72, 0x69, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x38, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x41, 0x43, 0x6e, 0x65,
	0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50, 0x56, 0x18, 0x39, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x42, 0x41, 0x43, 0x6e, 0x65, 0x74, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x6f, 0x50,
	0x56, 0x12, 0x3a, 0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x18, 0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0d,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2f, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x18, 0x3b, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4d, 0x65, 0x74,
	0x61, 0x54, 0x61, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x3c, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3b, 0x0a, 0x0e,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x3e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x52, 0x0e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x10, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x3f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x52, 0x10, 0x43, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x22, 0xc3,
	0x09, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x43,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0d,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x1e, 0x0a,
	0x0a, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x0c, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x63, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72,
	0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07,
	0x4d, 0x61, 0x78, 0x41, 0x44, 0x50, 0x55, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x4d,
	0x61, 0x78, 0x41, 0x44, 0x50, 0x55, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x65, 0x67, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x53, 0x65,
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x79,
	0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52, 0x70, 0x6d, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x52,
	0x70, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x57, 0x70,
	0x6d, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x57, 0x70, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x55,
	0x55, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f,
	0x72, 0x6b, 0x55, 0x55, 0x49, 0x44, 0x12, 0x3a, 0x0a, 0x18, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x05, 0x52, 0x18, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74,
	0x65, 0x64, 0x12, 0x24, 0x0a, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x17, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x06, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73,
	0x18, 0x18, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54,
	0x61, 0x67, 0x52, 0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x46, 0x61, 0x73, 0x74,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x46, 0x61, 0x73, 0x74, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x53, 0x6c, 0x6f, 0x77, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x53, 0x6c, 0x6f, 0x77,
	0x50, 0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x30,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x18, 0x1d, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4d,
	0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73,
	0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x18, 0x20, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49, 0x44, 0x12, 0x24,
	0x0a, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xcc, 0x0c, 0x0a, 0x07, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x12, 0x0a, 0x04, 0x55, 0x55, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x55, 0x55, 0x49, 0x44, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x0b, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x3a, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x4d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x2a, 0x0a, 0x10,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x54, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x68, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x54, 0x68, 0x69, 0x6e, 0x67, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3c, 0x0a, 0x19,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x19, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x73, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x12, 0x2a, 0x0a, 0x10, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x50, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x49, 0x50, 0x12, 0x12, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x13,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x4e, 0x65,
	0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x18, 0x14, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x1c, 0x0a, 0x09,
	0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x55, 0x49, 0x44, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x55, 0x55, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0e,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x75, 0x64, 0x52, 0x61, 0x74, 0x65, 0x18, 0x18,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x42, 0x61, 0x75, 0x64,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x53, 0x74,
	0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x42, 0x69, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0c, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x69, 0x74, 0x79,
	0x12, 0x26, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x42, 0x69,
	0x74, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x69, 0x74, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x28,
	0x0a, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x48, 0x6f, 0x73, 0x74,
	0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x48, 0x6f, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x07,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x1f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x52, 0x07, 0x44, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x04, 0x54, 0x61, 0x67, 0x73, 0x18, 0x20, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x54, 0x61, 0x67, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x50, 0x6f, 0x6c, 0x6c,
	0x52, 0x61, 0x74, 0x65, 0x18, 0x21, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x50,
	0x6f, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x54,
	0x61, 0x67, 0x73, 0x18, 0x22, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67,
	0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x54, 0x61, 0x67, 0x73, 0x12, 0x32, 0x0a, 0x14, 0x48, 0x61,
	0x73, 0x50, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x18, 0x23, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x48, 0x61, 0x73, 0x50, 0x6f, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x1e,
	0x0a, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x18, 0x24, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x55, 0x55, 0x49, 0x44, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x25, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x43,
	0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55,
	0x49, 0x44, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x55, 0x49,
	0x44, 0x52, 0x10, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55,
	0x55, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x28, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x53,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x18, 0x29, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x49, 0x73, 0x43, 0x6c, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x55, 0x55, 0x49, 0x44, 0x12, 0x4c, 0x0a, 0x13, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x13,
	0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x22, 0x9f, 0x01, 0x0a, 0x22, 0x57, 0x69, 0x7a, 0x61, 0x72, 0x64, 0x4e, 0x65,
	0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f,
	0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x12, 0x20, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52,
	0x03, 0x6e, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x03, 0x64, 0x65, 0x76, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x03, 0x64, 0x65, 0x76, 0x12, 0x1e, 0x0a, 0x03, 0x70, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x03, 0x70, 0x6e, 0x74, 0x22, 0x1c, 0x0a, 0x0c, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x01, 0x72, 0x22, 0x18, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x01, 0x72, 0x22, 0x8e, 0x01,
	0x0a, 0x0c, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x57, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x57, 0x65, 0x62,
	0x73, 0x69, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x48, 0x61, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x48, 0x61, 0x73, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x22, 0x21,
	0x0a, 0x11, 0x55, 0x72, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x0c, 0x0a, 0x01, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x01,
	0x72, 0x32, 0xcc, 0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x3a, 0x0a, 0x14,
	0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x41, 0x6e, 0x64, 0x53, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x42, 0x6f, 0x64, 0x79, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x49, 0x6e, 0x69, 0x74,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x12, 0x24, 0x0a, 0x06, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x25, 0x0a, 0x07, 0x44, 0x69, 0x73, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12,
	0x2c, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x03, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12, 0x11, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2d, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x32, 0x93, 0x04, 0x0a, 0x08, 0x44, 0x42, 0x48, 0x65, 0x6c, 0x70, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x0f, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x69, 0x74, 0x68,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x29, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x50,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x50, 0x75, 0x74, 0x12,
	0x11, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x50, 0x61, 0x74, 0x63, 0x68, 0x12, 0x13, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x14, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x1d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53,
	0x65, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x42, 0x0a, 0x11, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x12, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x43, 0x6c, 0x65, 0x61, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x46, 0x6f, 0x72, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0c, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5d, 0x0a, 0x1b, 0x57, 0x69, 0x7a, 0x61, 0x72,
	0x64, 0x4e, 0x65, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x57,
	0x69, 0x7a, 0x61, 0x72, 0x64, 0x4e, 0x65, 0x77, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x44,
	0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x4e, 0x75, 0x62, 0x65, 0x49, 0x4f, 0x2f, 0x72, 0x75, 0x62, 0x69,
	0x78, 0x2d, 0x6f, 0x73, 0x2f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_module_proto_rawDescOnce sync.Once
	file_module_proto_rawDescData = file_module_proto_rawDesc
)

func file_module_proto_rawDescGZIP() []byte {
	file_module_proto_rawDescOnce.Do(func() {
		file_module_proto_rawDescData = protoimpl.X.CompressGZIP(file_module_proto_rawDescData)
	})
	return file_module_proto_rawDescData
}

var file_module_proto_msgTypes = make([]protoimpl.MessageInfo, 32)
var file_module_proto_goTypes = []interface{}{
	(*InitRequest)(nil),                        // 0: proto.InitRequest
	(*Empty)(nil),                              // 1: proto.Empty
	(*ConfigBody)(nil),                         // 2: proto.ConfigBody
	(*GetWithoutParamRequest)(nil),             // 3: proto.GetWithoutParamRequest
	(*GetRequest)(nil),                         // 4: proto.GetRequest
	(*PostRequest)(nil),                        // 5: proto.PostRequest
	(*PutRequest)(nil),                         // 6: proto.PutRequest
	(*PatchRequest)(nil),                       // 7: proto.PatchRequest
	(*DeleteRequest)(nil),                      // 8: proto.DeleteRequest
	(*SetErrorsForAllRequest)(nil),             // 9: proto.SetErrorsForAllRequest
	(*ClearErrorsForAllRequest)(nil),           // 10: proto.ClearErrorsForAllRequest
	(*CommonFault)(nil),                        // 11: proto.CommonFault
	(*CommonCreated)(nil),                      // 12: proto.CommonCreated
	(*CommonIP)(nil),                           // 13: proto.CommonIP
	(*CommonDevice)(nil),                       // 14: proto.CommonDevice
	(*Priority)(nil),                           // 15: proto.Priority
	(*Tag)(nil),                                // 16: proto.Tag
	(*HistoryConfig)(nil),                      // 17: proto.HistoryConfig
	(*PointMetaTag)(nil),                       // 18: proto.PointMetaTag
	(*PointHistory)(nil),                       // 19: proto.PointHistory
	(*DeviceMetaTag)(nil),                      // 20: proto.DeviceMetaTag
	(*NetworkMetaTag)(nil),                     // 21: proto.NetworkMetaTag
	(*CommonSourceUUID)(nil),                   // 22: proto.CommonSourceUUID
	(*CommonHistoryEnable)(nil),                // 23: proto.CommonHistoryEnable
	(*Point)(nil),                              // 24: proto.Point
	(*Device)(nil),                             // 25: proto.Device
	(*Network)(nil),                            // 26: proto.Network
	(*WizardNewNetworkDevicePointRequest)(nil), // 27: proto.WizardNewNetworkDevicePointRequest
	(*BoolResponse)(nil),                       // 28: proto.BoolResponse
	(*Response)(nil),                           // 29: proto.Response
	(*InfoResponse)(nil),                       // 30: proto.InfoResponse
	(*UrlPrefixResponse)(nil),                  // 31: proto.UrlPrefixResponse
	(*timestamppb.Timestamp)(nil),              // 32: google.protobuf.Timestamp
}
var file_module_proto_depIdxs = []int32{
	32, // 0: proto.CommonFault.LastOk:type_name -> google.protobuf.Timestamp
	32, // 1: proto.CommonFault.LastFail:type_name -> google.protobuf.Timestamp
	32, // 2: proto.CommonCreated.CreatedAt:type_name -> google.protobuf.Timestamp
	32, // 3: proto.CommonCreated.UpdatedAt:type_name -> google.protobuf.Timestamp
	32, // 4: proto.CommonDevice.PollDelayPointsMS:type_name -> google.protobuf.Timestamp
	13, // 5: proto.CommonDevice.CommonIP:type_name -> proto.CommonIP
	26, // 6: proto.Tag.Networks:type_name -> proto.Network
	25, // 7: proto.Tag.Devices:type_name -> proto.Device
	24, // 8: proto.Tag.Points:type_name -> proto.Point
	32, // 9: proto.PointHistory.Timestamp:type_name -> google.protobuf.Timestamp
	12, // 10: proto.Point.CommonCreated:type_name -> proto.CommonCreated
	11, // 11: proto.Point.CommonFault:type_name -> proto.CommonFault
	15, // 12: proto.Point.Priority:type_name -> proto.Priority
	16, // 13: proto.Point.Tags:type_name -> proto.Tag
	17, // 14: proto.Point.HistoryConfig:type_name -> proto.HistoryConfig
	18, // 15: proto.Point.MetaTags:type_name -> proto.PointMetaTag
	19, // 16: proto.Point.PointHistories:type_name -> proto.PointHistory
	22, // 17: proto.Point.CommonSourceUUID:type_name -> proto.CommonSourceUUID
	11, // 18: proto.Device.CommonFault:type_name -> proto.CommonFault
	12, // 19: proto.Device.CommonCreated:type_name -> proto.CommonCreated
	14, // 20: proto.Device.CommonDevice:type_name -> proto.CommonDevice
	24, // 21: proto.Device.Points:type_name -> proto.Point
	16, // 22: proto.Device.Tags:type_name -> proto.Tag
	20, // 23: proto.Device.MetaTags:type_name -> proto.DeviceMetaTag
	11, // 24: proto.Network.CommonFault:type_name -> proto.CommonFault
	12, // 25: proto.Network.CommonCreated:type_name -> proto.CommonCreated
	25, // 26: proto.Network.Devices:type_name -> proto.Device
	16, // 27: proto.Network.Tags:type_name -> proto.Tag
	21, // 28: proto.Network.MetaTags:type_name -> proto.NetworkMetaTag
	22, // 29: proto.Network.CommonSourceUUID:type_name -> proto.CommonSourceUUID
	23, // 30: proto.Network.CommonHistoryEnable:type_name -> proto.CommonHistoryEnable
	26, // 31: proto.WizardNewNetworkDevicePointRequest.net:type_name -> proto.Network
	25, // 32: proto.WizardNewNetworkDevicePointRequest.dev:type_name -> proto.Device
	24, // 33: proto.WizardNewNetworkDevicePointRequest.pnt:type_name -> proto.Point
	2,  // 34: proto.Module.ValidateAndSetConfig:input_type -> proto.ConfigBody
	0,  // 35: proto.Module.Init:input_type -> proto.InitRequest
	1,  // 36: proto.Module.Enable:input_type -> proto.Empty
	1,  // 37: proto.Module.Disable:input_type -> proto.Empty
	1,  // 38: proto.Module.GetInfo:input_type -> proto.Empty
	4,  // 39: proto.Module.Get:input_type -> proto.GetRequest
	5,  // 40: proto.Module.Post:input_type -> proto.PostRequest
	6,  // 41: proto.Module.Put:input_type -> proto.PutRequest
	7,  // 42: proto.Module.Patch:input_type -> proto.PatchRequest
	8,  // 43: proto.Module.Delete:input_type -> proto.DeleteRequest
	3,  // 44: proto.DBHelper.GetWithoutParam:input_type -> proto.GetWithoutParamRequest
	4,  // 45: proto.DBHelper.Get:input_type -> proto.GetRequest
	5,  // 46: proto.DBHelper.Post:input_type -> proto.PostRequest
	6,  // 47: proto.DBHelper.Put:input_type -> proto.PutRequest
	7,  // 48: proto.DBHelper.Patch:input_type -> proto.PatchRequest
	8,  // 49: proto.DBHelper.Delete:input_type -> proto.DeleteRequest
	9,  // 50: proto.DBHelper.SetErrorsForAll:input_type -> proto.SetErrorsForAllRequest
	10, // 51: proto.DBHelper.ClearErrorsForAll:input_type -> proto.ClearErrorsForAllRequest
	27, // 52: proto.DBHelper.WizardNewNetworkDevicePoint:input_type -> proto.WizardNewNetworkDevicePointRequest
	29, // 53: proto.Module.ValidateAndSetConfig:output_type -> proto.Response
	1,  // 54: proto.Module.Init:output_type -> proto.Empty
	1,  // 55: proto.Module.Enable:output_type -> proto.Empty
	1,  // 56: proto.Module.Disable:output_type -> proto.Empty
	30, // 57: proto.Module.GetInfo:output_type -> proto.InfoResponse
	29, // 58: proto.Module.Get:output_type -> proto.Response
	29, // 59: proto.Module.Post:output_type -> proto.Response
	29, // 60: proto.Module.Put:output_type -> proto.Response
	29, // 61: proto.Module.Patch:output_type -> proto.Response
	29, // 62: proto.Module.Delete:output_type -> proto.Response
	29, // 63: proto.DBHelper.GetWithoutParam:output_type -> proto.Response
	29, // 64: proto.DBHelper.Get:output_type -> proto.Response
	29, // 65: proto.DBHelper.Post:output_type -> proto.Response
	29, // 66: proto.DBHelper.Put:output_type -> proto.Response
	29, // 67: proto.DBHelper.Patch:output_type -> proto.Response
	29, // 68: proto.DBHelper.Delete:output_type -> proto.Response
	1,  // 69: proto.DBHelper.SetErrorsForAll:output_type -> proto.Empty
	1,  // 70: proto.DBHelper.ClearErrorsForAll:output_type -> proto.Empty
	28, // 71: proto.DBHelper.WizardNewNetworkDevicePoint:output_type -> proto.BoolResponse
	53, // [53:72] is the sub-list for method output_type
	34, // [34:53] is the sub-list for method input_type
	34, // [34:34] is the sub-list for extension type_name
	34, // [34:34] is the sub-list for extension extendee
	0,  // [0:34] is the sub-list for field type_name
}

func init() { file_module_proto_init() }
func file_module_proto_init() {
	if File_module_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_module_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Empty); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigBody); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWithoutParamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PostRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PutRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatchRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetErrorsForAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClearErrorsForAllRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonFault); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonIP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonDevice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Priority); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HistoryConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointMetaTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeviceMetaTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NetworkMetaTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonSourceUUID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommonHistoryEnable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Device); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Network); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WizardNewNetworkDevicePointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_module_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UrlPrefixResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_module_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   32,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_module_proto_goTypes,
		DependencyIndexes: file_module_proto_depIdxs,
		MessageInfos:      file_module_proto_msgTypes,
	}.Build()
	File_module_proto = out.File
	file_module_proto_rawDesc = nil
	file_module_proto_goTypes = nil
	file_module_proto_depIdxs = nil
}
